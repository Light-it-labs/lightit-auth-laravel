<?php

declare(strict_types=1);

namespace Lightit\Authentication\Domain\Actions;

use Google\Client as GoogleClient;
use Illuminate\Contracts\Auth\Factory as AuthFactory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Lightit\Models\JWTAuthenticatable;
use Lightit\Exceptions\InvalidGoogleTokenException;
use Lightit\Exceptions\UnauthorizedException;
use Lightit\Authentication\Domain\DataTransferObjects\LoginDto;
use PHPOpenSourceSaver\JWTAuth\Factory as JWTAuth;
use PHPOpenSourceSaver\JWTAuth\JWTGuard;

class GoogleLoginAction
{
    public function __construct(
        private readonly AuthFactory $factory,
        private readonly JWTAuth $jwtAuth,
        private readonly GoogleClient $googleClient,
    ) {
    }

    public function execute(string $googleIdToken): array
    {
        $payload = $this->googleClient->verifyIdToken($googleIdToken);

        if (!$payload) {
            throw new InvalidGoogleTokenException('The Google token is not valid');
        }

        /** @var JWTGuard $guard */
         $guard = $this->factory->guard();
         $user = JWTAuthenticatable::firstOrNew(['email' => $payload['email']]);

         if (! $user->exists) {
             $user->name = $payload['name'];
             $user->password = Hash::make(Str::random(10));
             $user->save();
         }

         if (! $token = $guard->login($user)) {
             throw new UnauthorizedException();
         }

         return new LoginDto(
             $token,
             'bearer',
             $this->jwtAuth->getTTL() * 60,
         );
    }
}
